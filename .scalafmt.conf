version = "3.7.15"
runner.dialect = scala213 # Scala version
maxColumn = 120 # Max width of one line of code
indent.main = 2 # Main indent size
indent.callSite = 2 # Indent for function call parameters
indent.ctrlSite = 2 # Indent for control expression (if, while etc.) parameters
indent.defnSite = 4 # Indent for parameters in definitions (e.g. functions)
indent.ctorSite = 4 # Indent for constructor parameters (e.g. classes)
indent.extendSite = 4 # Indent for extend sequence
indentOperator.exemptScope = all # Which cases are exempted from indenting in a line-break situation
                                 # Options are oldTopLevel, aloneEnclosed, aloneArgOrBody, all
# indentOperator.excludeRegex = '^$' # This disables the exemption
align.preset = more # Aligns lines by their operator
align.openParenCallSite = false # Whether function parameters are aligned at the parentheses 
align.closeParenSite = false # Whether closing paren is aligned, if function params are aligned at the parens
align.multiline = false # Alignment for multiline statements
align.allowOverflow = true # Whether maxColumn can be breached as a result of alignment
newlines.source = keep # Approach to line breaks : fold removes custom line breaks if they can fit the maxColumn
                       # keep keeps manual line breaks where feasible
                       # unfold creates a line break more often
newlines.topLevelStatementBlankLines = [ # Number of blank lines before and after a top level statement (class etc.)
  { blanks { before = 1, after = 1} }
]
newlines.alwaysBeforeElseAfterCurlyIf = false # Where curly brace is placed in an if-else structure.
                                              # Does not apply to when .elsewhen
comments.wrap = standalone # Wraps comments that overflow the maxColumn
docstrings.style = SpaceAsterisk # Scaladoc docstring type
danglingParentheses.preset = true

rewrite.rules = [PreferCurlyFors] # replaces parentheses for curly braces in for loops that contain multiple generators
